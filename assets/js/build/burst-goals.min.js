const burst_goals_setup=()=>{console.log("[Burst Statistics] Initialize goal trackers");for(let t=0;t<burst.goals.length;t++){var e=burst.goals[t];e.url&&e.url!==window.location.pathname&&"*"!==e.url&&burst.goals.splice(t,1)}for(let t=0;t<burst.goals.length;t++){var r=burst.goals[t];("views"===r.type?burst_setup_viewport_tracker:burst_setup_click_tracker)(r)}},burst_setup_viewport_tracker=r=>{console.log("[Burst Statistics] Setup viewport tracker for goal: "+r.title);var t="id"===r.setup.attribute?"#":".",s=document.querySelectorAll(t+r.setup.value);for(let e=0;e<s.length;e++){let t=s[e];burst_is_element_in_viewport(t)?burst_goal_triggered(r):window.addEventListener("scroll",()=>burst_listener_view(t,r),!0)}},burst_is_element_in_viewport=t=>{t=t.getBoundingClientRect();return 0<=t.top&&0<=t.left&&t.bottom<=(window.innerHeight||document.documentElement.clientHeight)&&t.right<=(window.innerWidth||document.documentElement.clientWidth)},burst_listener_view=(t,e)=>{burst_is_element_in_viewport(t)&&(burst_goal_triggered(e),window.removeEventListener("scroll",()=>burst_listener_view(t,e),!0))},burst_setup_click_tracker=r=>{console.log("[Burst Statistics] Setup click tracker for goal: "+r.title);var t="id"===r.setup.attribute?"#":".",s=document.querySelectorAll(t+r.setup.value);for(let e=0;e<s.length;e++){let t=s[e];t.addEventListener("click",()=>burst_listener_click(t,r),{once:!0})}},burst_listener_click=(t,e)=>{burst_goal_triggered(e),t.removeEventListener("scroll",()=>burst_listener_view(t,e),!0)},burst_goal_triggered=t=>{console.log(`[Burst Statistics] The ${t.title} goal was triggered.`),-1===burst_completed_goals.indexOf(t.ID)&&(console.log(t),burst_completed_goals.push(t.ID))};export default()=>{console.log("[Burst Statistics] Goals imported"),burst_goals_setup()};